rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isCampusUser() {
      return request.auth != null && request.auth.token.email_verified == true &&
             request.auth.token.email.matches('.*@bitsathy\\.ac\\.in$');
    }
    
    // Users collection - users can read all user profiles but only edit their own
    match /users/{userId} {
allow read: if isCampusUser();
allow create, update: if isCampusUser() && request.auth.uid == userId;
      allow delete: if false; // Prevent user deletion
      
      // User connections subcollection
      match /connections/{connectionId} {
allow read, write: if isCampusUser() && request.auth.uid == userId;
      }
      
      // User notifications subcollection
      match /notifications/{notificationId} {
allow read, write: if isCampusUser() && request.auth.uid == userId;
      }
      
      // User shared posts subcollection
      match /sharedPosts/{sharedPostId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Posts collection - all authenticated users can read, only authors can edit/delete
    match /posts/{postId} {
allow read: if isCampusUser();
allow create: if isCampusUser() && 
                   request.auth.uid == resource.data.authorId;
allow update: if isCampusUser() && 
                   request.auth.uid == resource.data.authorId;
allow delete: if isCampusUser() && 
                   request.auth.uid == resource.data.authorId;
      
      // Comments subcollection
      match /comments/{commentId} {
allow read: if isCampusUser();
allow create: if isCampusUser() && 
                     request.auth.uid == resource.data.authorId;
allow update, delete: if isCampusUser() && 
                              request.auth.uid == resource.data.authorId;
      }
    }
    
    // Direct Messages collection
    match /directMessages/{dmId} {
      // Allow access only if user is part of the conversation
      // dmId format: "userId1_userId2" where userIds are sorted alphabetically
allow read, write: if isCampusUser() && 
                        (dmId.matches('.*' + request.auth.uid + '_.*') ||
                         dmId.matches('.*_' + request.auth.uid + '_.*') ||
                         dmId.matches('.*_' + request.auth.uid));
      
      // Messages subcollection
      match /messages/{messageId} {
allow read: if isCampusUser() && 
                   (dmId.matches('.*' + request.auth.uid + '_.*') ||
                    dmId.matches('.*_' + request.auth.uid + '_.*') ||
                    dmId.matches('.*_' + request.auth.uid));
allow create: if isCampusUser() && 
                     request.auth.uid == resource.data.uid &&
                     (dmId.matches('.*' + request.auth.uid + '_.*') ||
                      dmId.matches('.*_' + request.auth.uid + '_.*') ||
                      dmId.matches('.*_' + request.auth.uid));
allow update, delete: if isCampusUser() && 
                              request.auth.uid == resource.data.uid;
      }
    }
    
    // Groups collection
    match /groups/{groupId} {
      // Only group members can read group info
allow read: if isCampusUser() && 
                 request.auth.uid in resource.data.members;
      
      // Only authenticated users can create groups
allow create: if isCampusUser() && 
                   request.auth.uid == resource.data.createdBy &&
                   request.auth.uid in resource.data.members;
      
      // Only group admin can update group (add/remove members, change name)
allow update: if isCampusUser() && 
                   request.auth.uid == resource.data.createdBy;
      
      // Only group admin can delete group
allow delete: if isCampusUser() && 
                   request.auth.uid == resource.data.createdBy;
      
      // Group messages subcollection
      match /messages/{messageId} {
        // Only group members can read messages
allow read: if isCampusUser() && 
                   request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
        
        // Only group members can create messages
allow create: if isCampusUser() && 
                     request.auth.uid == resource.data.uid &&
                     request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
        
        // Message author or group admin can delete messages
allow delete: if isCampusUser() && 
                     (request.auth.uid == resource.data.uid ||
                      request.auth.uid == get(/databases/$(database)/documents/groups/$(groupId)).data.createdBy);
        
        // Only message author can update their own messages
allow update: if isCampusUser() && 
                     request.auth.uid == resource.data.uid;
      }
    }
  }
}